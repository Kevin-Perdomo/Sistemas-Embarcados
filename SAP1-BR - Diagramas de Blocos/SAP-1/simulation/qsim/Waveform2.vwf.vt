// Copyright (C) 2020  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and any partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details, at
// https://fpgasoftware.intel.com/eula.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "09/11/2024 23:14:21"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          SAP1
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module SAP1_vlg_vec_tst();
// constants                                           
// general purpose registers
reg AUTO;
reg dal0;
reg dal1;
reg dal2;
reg dal3;
reg dal4;
reg dal5;
reg dal6;
reg dal7;
reg MAN;
reg mar_dip0;
reg mar_dip1;
reg mar_dip2;
reg mar_dip3;
reg PROGRAM_RUN_n;
reg RESET;
reg SEC;
reg WR_BUTTON;
// wires                                               
wire addr_0;
wire addr_1;
wire addr_2;
wire addr_3;
wire LED0;
wire LED1;
wire LED2;
wire LED3;
wire LED4;
wire LED5;
wire LED6;
wire LED7;

// assign statements (if any)                          
SAP1 i1 (
// port map - connection between master ports and signals/registers   
	.addr_0(addr_0),
	.addr_1(addr_1),
	.addr_2(addr_2),
	.addr_3(addr_3),
	.AUTO(AUTO),
	.dal0(dal0),
	.dal1(dal1),
	.dal2(dal2),
	.dal3(dal3),
	.dal4(dal4),
	.dal5(dal5),
	.dal6(dal6),
	.dal7(dal7),
	.LED0(LED0),
	.LED1(LED1),
	.LED2(LED2),
	.LED3(LED3),
	.LED4(LED4),
	.LED5(LED5),
	.LED6(LED6),
	.LED7(LED7),
	.MAN(MAN),
	.mar_dip0(mar_dip0),
	.mar_dip1(mar_dip1),
	.mar_dip2(mar_dip2),
	.mar_dip3(mar_dip3),
	.PROGRAM_RUN_n(PROGRAM_RUN_n),
	.RESET(RESET),
	.SEC(SEC),
	.WR_BUTTON(WR_BUTTON)
);
initial 
begin 
#1000000 $finish;
end 

// AUTO
initial
begin
	AUTO = 1'b0;
	AUTO = #355000 1'b1;
	# 5000;
	repeat(64)
	begin
		AUTO = 1'b0;
		AUTO = #5000 1'b1;
		# 5000;
	end
end 

// mar_dip3
initial
begin
	mar_dip3 = 1'b0;
	mar_dip3 = #240000 1'b1;
	mar_dip3 = #110000 1'b0;
end 

// mar_dip2
initial
begin
	mar_dip2 = 1'b0;
end 

// mar_dip1
initial
begin
	mar_dip1 = 1'b0;
	mar_dip1 = #120000 1'b1;
	mar_dip1 = #120000 1'b0;
end 

// mar_dip0
initial
begin
	mar_dip0 = 1'b0;
	mar_dip0 = #60000 1'b1;
	mar_dip0 = #60000 1'b0;
	mar_dip0 = #60000 1'b1;
	mar_dip0 = #60000 1'b0;
	mar_dip0 = #50000 1'b1;
	mar_dip0 = #60000 1'b0;
end 

// dal7
initial
begin
	dal7 = 1'b0;
	dal7 = #120000 1'b1;
	dal7 = #120000 1'b0;
end 

// dal6
initial
begin
	dal6 = 1'b0;
	dal6 = #60000 1'b1;
	dal6 = #120000 1'b0;
end 

// dal5
initial
begin
	dal5 = 1'b0;
	dal5 = #120000 1'b1;
	dal5 = #120000 1'b0;
end 

// dal4
initial
begin
	dal4 = 1'b1;
	dal4 = #60000 1'b0;
end 

// dal3
initial
begin
	dal3 = 1'b1;
	dal3 = #120000 1'b0;
end 

// dal2
initial
begin
	dal2 = 1'b0;
end 

// dal1
initial
begin
	dal1 = 1'b0;
	dal1 = #240000 1'b1;
	dal1 = #110000 1'b0;
end 

// dal0
initial
begin
	dal0 = 1'b0;
	dal0 = #60000 1'b1;
	dal0 = #60000 1'b0;
	dal0 = #60000 1'b1;
	dal0 = #60000 1'b0;
end 

// WR_BUTTON
initial
begin
	WR_BUTTON = 1'b0;
	WR_BUTTON = #20000 1'b1;
	WR_BUTTON = #20000 1'b0;
	WR_BUTTON = #40000 1'b1;
	WR_BUTTON = #20000 1'b0;
	WR_BUTTON = #40000 1'b1;
	WR_BUTTON = #20000 1'b0;
	WR_BUTTON = #40000 1'b1;
	WR_BUTTON = #20000 1'b0;
	WR_BUTTON = #30000 1'b1;
	WR_BUTTON = #20000 1'b0;
	WR_BUTTON = #40000 1'b1;
	WR_BUTTON = #20000 1'b0;
end 

// PROGRAM_RUN_n
initial
begin
	PROGRAM_RUN_n = 1'b0;
	PROGRAM_RUN_n = #350000 1'b1;
end 

// MAN
initial
begin
	MAN = 1'b0;
end 

// RESET
initial
begin
	RESET = 1'b0;
end 

// SEC
initial
begin
	SEC = 1'b1;
end 
endmodule

