// Copyright (C) 2020  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and any partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details, at
// https://fpgasoftware.intel.com/eula.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "08/22/2024 22:17:50"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          DM74LS153
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module DM74LS153_vlg_vec_tst();
// constants                                           
// general purpose registers
reg _1C0;
reg _1C1;
reg _1C2;
reg _1C3;
reg _2C0;
reg _2C1;
reg _2C2;
reg _2C3;
reg A;
reg B;
reg G1;
reg G2;
// wires                                               
wire Y1;
wire Y2;

// assign statements (if any)                          
DM74LS153 i1 (
// port map - connection between master ports and signals/registers   
	._1C0(_1C0),
	._1C1(_1C1),
	._1C2(_1C2),
	._1C3(_1C3),
	._2C0(_2C0),
	._2C1(_2C1),
	._2C2(_2C2),
	._2C3(_2C3),
	.A(A),
	.B(B),
	.G1(G1),
	.G2(G2),
	.Y1(Y1),
	.Y2(Y2)
);
initial 
begin 
#1000000 $finish;
end 

// B
always
begin
	B = 1'b0;
	B = #500000 1'b1;
	#500000;
end 

// A
always
begin
	A = 1'b0;
	A = #250000 1'b1;
	#250000;
end 

// _1C0
always
begin
	_1C0 = 1'b0;
	_1C0 = #125000 1'b1;
	#125000;
end 

// _1C1
always
begin
	_1C1 = 1'b0;
	_1C1 = #62500 1'b1;
	#62500;
end 

// _1C2
always
begin
	_1C2 = 1'b0;
	_1C2 = #31250 1'b1;
	#31250;
end 

// _1C3
always
begin
	_1C3 = 1'b0;
	_1C3 = #15625 1'b1;
	#15625;
end 

// _2C0
initial
begin
	_2C0 = 1'b0;
end 

// _2C1
initial
begin
	_2C1 = 1'b0;
end 

// _2C2
initial
begin
	_2C2 = 1'b0;
end 

// _2C3
initial
begin
	_2C3 = 1'b0;
end 

// G1
initial
begin
	G1 = 1'b1;
	G1 = #40000 1'b0;
end 

// G2
initial
begin
	G2 = 1'b0;
end 
endmodule

