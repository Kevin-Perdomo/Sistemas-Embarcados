// Copyright (C) 2020  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and any partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details, at
// https://fpgasoftware.intel.com/eula.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "08/17/2024 23:19:00"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          DM74LS139
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module DM74LS139_vlg_vec_tst();
// constants                                           
// general purpose registers
reg A_1;
reg A_2;
reg B_1;
reg B_2;
reg Enable_1;
reg Enable_2;
// wires                                               
wire S_00;
wire S_01;
wire S_02;
wire S_03;
wire S_10;
wire S_11;
wire S_12;
wire S_13;

// assign statements (if any)                          
DM74LS139 i1 (
// port map - connection between master ports and signals/registers   
	.A_1(A_1),
	.A_2(A_2),
	.B_1(B_1),
	.B_2(B_2),
	.Enable_1(Enable_1),
	.Enable_2(Enable_2),
	.S_00(S_00),
	.S_01(S_01),
	.S_02(S_02),
	.S_03(S_03),
	.S_10(S_10),
	.S_11(S_11),
	.S_12(S_12),
	.S_13(S_13)
);
initial 
begin 
#1000000 $finish;
end 

// Enable_1
always
begin
	Enable_1 = 1'b0;
	Enable_1 = #250000 1'b1;
	#250000;
end 

// A_1
always
begin
	A_1 = 1'b0;
	A_1 = #125000 1'b1;
	#125000;
end 

// B_1
always
begin
	B_1 = 1'b0;
	B_1 = #62500 1'b1;
	#62500;
end 
endmodule

