// Copyright (C) 2020  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and any partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details, at
// https://fpgasoftware.intel.com/eula.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "08/22/2024 21:04:45"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          CI_74LS157
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module CI_74LS157_vlg_vec_tst();
// constants                                           
// general purpose registers
reg E;
reg L0A;
reg L0B;
reg L0C;
reg L0D;
reg L1A;
reg L1B;
reg L1C;
reg L1D;
reg S;
// wires                                               
wire ZA;
wire ZB;
wire ZC;
wire ZD;

// assign statements (if any)                          
CI_74LS157 i1 (
// port map - connection between master ports and signals/registers   
	.E(E),
	.L0A(L0A),
	.L0B(L0B),
	.L0C(L0C),
	.L0D(L0D),
	.L1A(L1A),
	.L1B(L1B),
	.L1C(L1C),
	.L1D(L1D),
	.S(S),
	.ZA(ZA),
	.ZB(ZB),
	.ZC(ZC),
	.ZD(ZD)
);
initial 
begin 
#1000000 $finish;
end 

// E
always
begin
	E = 1'b0;
	E = #500000 1'b1;
	#500000;
end 

// S
always
begin
	S = 1'b0;
	S = #250000 1'b1;
	#250000;
end 

// L0A
always
begin
	L0A = 1'b0;
	L0A = #125000 1'b1;
	#125000;
end 

// L1A
always
begin
	L1A = 1'b0;
	L1A = #62500 1'b1;
	#62500;
end 

// L0B
initial
begin
	L0B = 1'b0;
end 

// L1B
initial
begin
	L1B = 1'b0;
end 

// L0C
initial
begin
	L0C = 1'b0;
end 

// L1C
initial
begin
	L1C = 1'b0;
end 

// L0D
initial
begin
	L0D = 1'b0;
end 

// L1D
initial
begin
	L1D = 1'b0;
end 
endmodule

