// Copyright (C) 2020  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and any partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details, at
// https://fpgasoftware.intel.com/eula.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "10/17/2024 22:10:55"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          sap
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module sap_vlg_vec_tst();
// constants                                           
// general purpose registers
reg WR;
reg clear;
reg clock;
reg [3:0] mar_dip;
reg prog_run;
reg [7:0] ram_dip;
// wires                                               
wire [7:0] SAP_OUT;

// assign statements (if any)                          
sap i1 (
// port map - connection between master ports and signals/registers   
	.SAP_OUT(SAP_OUT),
	.WR(WR),
	.clear(clear),
	.clock(clock),
	.mar_dip(mar_dip),
	.prog_run(prog_run),
	.ram_dip(ram_dip)
);
initial 
begin 
#1000000 $stop;
end 

// clock
initial
begin
	clock = 1'b0;
	clock = #365000 1'b1;
	# 5000;
	repeat(63)
	begin
		clock = 1'b0;
		clock = #5000 1'b1;
		# 5000;
	end
end 
// mar_dip[ 3 ]
initial
begin
	mar_dip[3] = 1'b0;
	mar_dip[3] = #240000 1'b1;
	mar_dip[3] = #120000 1'b0;
end 
// mar_dip[ 2 ]
initial
begin
	mar_dip[2] = 1'b0;
end 
// mar_dip[ 1 ]
initial
begin
	mar_dip[1] = 1'b0;
	mar_dip[1] = #120000 1'b1;
	mar_dip[1] = #120000 1'b0;
end 
// mar_dip[ 0 ]
initial
begin
	mar_dip[0] = 1'b0;
	mar_dip[0] = #60000 1'b1;
	mar_dip[0] = #60000 1'b0;
	mar_dip[0] = #60000 1'b1;
	mar_dip[0] = #60000 1'b0;
	mar_dip[0] = #60000 1'b1;
	mar_dip[0] = #60000 1'b0;
end 
// ram_dip[ 7 ]
initial
begin
	ram_dip[7] = 1'b0;
	ram_dip[7] = #120000 1'b1;
	ram_dip[7] = #60000 1'b0;
end 
// ram_dip[ 6 ]
initial
begin
	ram_dip[6] = 1'b0;
	ram_dip[6] = #60000 1'b1;
	ram_dip[6] = #120000 1'b0;
end 
// ram_dip[ 5 ]
initial
begin
	ram_dip[5] = 1'b0;
	ram_dip[5] = #60000 1'b1;
	ram_dip[5] = #120000 1'b0;
end 
// ram_dip[ 4 ]
initial
begin
	ram_dip[4] = 1'b1;
	ram_dip[4] = #60000 1'b0;
end 
// ram_dip[ 3 ]
initial
begin
	ram_dip[3] = 1'b1;
	ram_dip[3] = #120000 1'b0;
end 
// ram_dip[ 2 ]
initial
begin
	ram_dip[2] = 1'b0;
end 
// ram_dip[ 1 ]
initial
begin
	ram_dip[1] = 1'b0;
	ram_dip[1] = #300000 1'b1;
	ram_dip[1] = #60000 1'b0;
end 
// ram_dip[ 0 ]
initial
begin
	ram_dip[0] = 1'b0;
	ram_dip[0] = #60000 1'b1;
	ram_dip[0] = #60000 1'b0;
	ram_dip[0] = #120000 1'b1;
	ram_dip[0] = #120000 1'b0;
end 

// WR
initial
begin
	WR = 1'b0;
	WR = #20000 1'b1;
	WR = #20000 1'b0;
	WR = #40000 1'b1;
	WR = #20000 1'b0;
	WR = #40000 1'b1;
	WR = #20000 1'b0;
	WR = #40000 1'b1;
	WR = #20000 1'b0;
	WR = #40000 1'b1;
	WR = #20000 1'b0;
	WR = #40000 1'b1;
	WR = #20000 1'b0;
end 

// prog_run
initial
begin
	prog_run = 1'b0;
	prog_run = #360000 1'b1;
end 

// clear
initial
begin
	clear = 1'b0;
end 
endmodule

